actor User
User->Browser:
Browser->jans-admin-ui: try to access `jans-admin-ui`

jans-admin-ui-> jans-auth-server: redirect to the authorization-server for authentication

 jans-auth-server-->jans-admin-ui: code

jans-admin-ui->jans-admin-ui-backend:request for `access_token` using `code`

jans-admin-ui-backend-> jans-auth-server: request for `access_token` using `code`

 jans-auth-server-->jans-admin-ui-backend:access_token

jans-admin-ui-backend->jans-admin-ui:send back the `access_token`

jans-admin-ui-> jans-auth-server:request for `user-information` using `access_token`

 jans-auth-server-->jans-admin-ui:`user-information` (also containing `scopes` mapped to user's `Role`)

jans-admin-ui->jans-admin-ui:Using `scopes` mapped to user's `Role`, the features on the UI can be turn on/off depending on the permissions.

jans-admin-ui->jans-admin-ui-backend:request `api-token` (with `scopes`)

jans-admin-ui-backend-> jans-auth-server:request `api-token` (with `scopes`)

 jans-auth-server-->jans-admin-ui-backend:api-token (with `scopes`)

jans-admin-ui-backend->jans-admin-ui:api-token (with `scopes`)

jans-admin-ui->jans-admin-ui:stores `api-token` in redux store

jans-admin-ui->jans-config-api:access `jans-config-api` apis using `api-token` 

jans-config-api-->jans-admin-ui: send api response if the required `scopes` are present in `api-token`
