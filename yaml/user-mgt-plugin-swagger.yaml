openapi: 3.0.1
info:
  title: Jans Config API - User-Mgt
  contact:
    name: Gluu Support
    url: https://support.gluu.org
    email: xxx@gluu.org
  license:
    name: Apache 2.0
    url: https://github.com/JanssenProject/jans/blob/main/LICENSE
  version: "1.0"
servers:
- url: https://jans.io/
  description: The Jans server
  variables: {}
tags:
- name: Configuration – User Management
paths:
  /jans-config-api/mgt/configuser:
    get:
      tags:
        - Configuration – User Management
      summary: Gets list of users
      description: Gets list of users
      operationId: get-user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: Users.
                description: List of users.
                items:
                  $ref: '#/components/schemas/CustomUser'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          description: Internal Server Error
      security:
        - oauth2: [https://jans.io/oauth/config/user.readonly]
      parameters:
        - schema:
            type: integer
            default: 50
          in: query
          name: limit
          description: Search size - max size of the results to return.
        - schema:
            type: string
          in: query
          name: pattern
          description: Search pattern.
        - schema:
            type: integer
            default: 1
          in: query
          name: startIndex
          description: The 1-based index of the first query result.
        - schema:
            type: string
            default: inum
          in: query
          name: sortBy
          description: Attribute whose value will be used to order the returned response.
        - schema:
            type: string
            default: ascending
            enum:
              - ascending
              - descending
          in: query
          name: sortOrder
          description: Order in which the sortBy param is applied. Allowed values are "ascending" and "descending".
    post:
      tags:
        - Configuration – User Management
      summary: Create new User
      description: Create new User
      operationId: post-user
      requestBody:
        content:
          application/json:
            schema:
              title: User Details.
              description: User Details.
              $ref: '#/components/schemas/ExtendedCustomUser'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                title: User Details.
                $ref: '#/components/schemas/CustomUser'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          description: Internal Server Error
      security:
        - oauth2: [https://jans.io/oauth/config/user.write]
    put:
      tags:
        - Configuration – User Management
      summary: Update User.
      description: Update User.
      operationId: put-user
      requestBody:
        content:
          application/json:
            schema:
              title: User Details.
              $ref: '#/components/schemas/CustomUser'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: User Details.
                $ref: '#/components/schemas/CustomUser'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          description: Internal Server Error
      security:
        - oauth2: [https://jans.io/oauth/config/user.write]
  /jans-config-api/mgt/configuser/{inum}:
    parameters:
      - schema:
          type: string
        name: inum
        in: path
        description: User identifier
        required: true
    get:
      tags:
        - Configuration – User Management
      summary: Get User by Inum
      description: Get User by Inum.
      operationId: get-user-by-inum
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUser'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          description: Internal Server Error
      security:
        - oauth2: [https://jans.io/oauth/config/user.readonly]
    delete:
      tags:
        - Configuration – User Management
      summary: Delete User.
      description: Delete User.
      operationId: delete-user
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          description: Internal Server Error
      security:
        - oauth2: [https://jans.io/oauth/config/user.delete]
    patch:
      tags:
        - Configuration – User Management
      summary: Patch user properties by Inum.
      description: Patch user properties by Inum.
      operationId: patch-user-by-inum
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/UserPatchRequest'
              description: Patch request object
              example: '[ {"jsonPatchString": {"op": "add", "path": "userId","value": "test-user" }, "customAttributes": [{"name": "name, displayName, birthdate, email","multiValued": true,"values": ["string"]}]}]'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: User Details.
                $ref: '#/components/schemas/CustomUser'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          description: Internal Server Error
      security:
        - oauth2: [https://jans.io/oauth/config/user.write]
components:
  schemas:
    CustomObjectAttribute:
      type: object
      properties:
        name:
          type: string
        multiValued:
          type: boolean
        values:
          type: array
          items:
            type: object
        value:
          type: object
        displayValue:
          type: string
    CustomUser:
      type: object
      properties:
        dn:
          type: string
        userId:
          type: string
        updatedAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        oxAuthPersistentJwt:
          type: array
          items:
            type: string
        customAttributes:
          type: array
          items:
            $ref: '#/components/schemas/CustomObjectAttribute'
        customObjectClasses:
          type: array
          items:
            type: string
        inum:
          type: string
        mail:
          type: string
        displayName:
          type: string
        jansStatus:
          type: string
        givenName:
          type: string
        userPassword:
          type: string
        status:
          type: string
        baseDn:
          type: string
    UserPatchRequest:
      type: object
      properties:
        jsonPatchString:
          type: string
        customAttributes:
          type: array
          items:
            $ref: '#/components/schemas/CustomObjectAttribute'
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: "https://{op-hostname}/.../token"
          scopes:
            https://jans.io/oauth/config/user.readonly: View user related information
            https://jans.io/oauth/config/user.write: Manage user related information
            https://jans.io/oauth/config/user.delete: Delete user related information
